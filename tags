!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ERRMSG_H	errmsg.h	2;"	d
ERR_ARGUMENT	errmsg.h	8;"	d
ERR_GRAB_FRAME	errmsg.h	7;"	d
ERR_NO_ERROR	errmsg.h	5;"	d
ERR_OPEN_FILE	errmsg.h	6;"	d
FUNCTIONS_H	functions.h	2;"	d
M	deblurToolsFuns.cpp	/^static const int M = 5 ;$/;"	v	file:
MAX_CORNERS	getHomographies.cpp	/^static const int MAX_CORNERS = 500 ;$/;"	v	file:
P	errmsg.h	3;"	d
T	calBlurFun.cpp	/^static const double T = 20 ;$/;"	v	file:
blurFunc	calBlurFun.cpp	/^IplImage* blurFunc(CvMat* preHomography , CvMat* homography , IplImage* latent , int tao)$/;"	f	signature:(CvMat* preHomography , CvMat* homography , IplImage* latent , int tao)
calLuckMats	calLuckiness.cpp	/^CvMat** calLuckMats(CvMat** homographies , int rows , int cols , int size)$/;"	f	signature:(CvMat** homographies , int rows , int cols , int size)
calLuckMats	functions.h	/^CvMat** calLuckMats(CvMat** homographies , int rows , int cols , int size) ;$/;"	p	signature:(CvMat** homographies , int rows , int cols , int size)
calLuckiness	calLuckiness.cpp	/^CvMat* calLuckiness(CvMat* homoPre , CvMat* homoPost , int rows , int cols)$/;"	f	signature:(CvMat* homoPre , CvMat* homoPost , int rows , int cols)
calLuckiness	functions.h	/^CvMat* calLuckiness(CvMat* homoPre , CvMat* homoPost , int rows , int cols) ;$/;"	p	signature:(CvMat* homoPre , CvMat* homoPost , int rows , int cols)
calWarpFunH	calBlurFun.cpp	/^static CvMat* calWarpFunH(const double t , CvMat* homoMat) $/;"	f	file:	signature:(const double t , CvMat* homoMat)
calWarpFunH	functions.h	/^CvMat* calWarpFunH(const float t , CvMat* homoMat) ;$/;"	p	signature:(const float t , CvMat* homoMat)
convertPointsToMat	convertPointsToMat.cpp	/^CvMat* convertPointsToMat(CvPoint2D32f* corner , int corner_count)$/;"	f	signature:(CvPoint2D32f* corner , int corner_count)
convertPointsToMat	functions.h	/^CvMat* convertPointsToMat(CvPoint2D32f* corners , int corner_count);$/;"	p	signature:(CvPoint2D32f* corners , int corner_count)
displayMat	functions.h	/^void displayMat(CvMat* mat) ;$/;"	p	signature:(CvMat* mat)
displayMat	tools.cpp	/^void displayMat(CvMat* mat)$/;"	f	signature:(CvMat* mat)
f	te.cpp	/^void f(vector< pair<int,int> >& v ){$/;"	f	signature:(vector< pair<int,int> >& v )
findPairs	deblurToolsFuns.cpp	/^int findPairs(int start , int end , double* avgLuckiness , int* pairs , int& pairSize)$/;"	f	signature:(int start , int end , double* avgLuckiness , int* pairs , int& pairSize)
findPairs	functions.h	/^int findPairs(int start , int end , double* avgLuckiness , int* pairs , int& pairSize);$/;"	p	signature:(int start , int end , double* avgLuckiness , int* pairs , int& pairSize)
getFramesFromVideo	functions.h	/^IplImage** getFramesFromVideo(const char* fileName , int& size);$/;"	p	signature:(const char* fileName , int& size)
getFramesFromVideo	getFrames.cpp	/^IplImage** getFramesFromVideo(const char* fileName , int& size)$/;"	f	signature:(const char* fileName , int& size)
getHomographies	getHomographies.cpp	/^CvMat** getHomographies(IplImage** frames , int size , CvMat** corners) \/* 传入到图片必须是灰度图 *\/$/;"	f	signature:(IplImage** frames , int size , CvMat** corners)
kpart	te.cpp	27;"	d	file:
main	calBlurFun.cpp	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	deblur.cpp	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	te.cpp	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
myErrmsg	errmsg.cpp	/^const char* myErrmsg[] ={$/;"	v
myErrno	errmsg.cpp	/^long myErrno = 0 ;$/;"	v
objs	makefile	/^objs = main.o getHomographies.o convertPointsToMat.o getFrames.o errmsg.o calLuckiness.o tools.o \\$/;"	m
opencvLib	makefile	/^opencvLib = `pkg-config opencv --libs  --cflags`$/;"	m
p	te.cpp	/^void p(pair<int,int>& elem)$/;"	f	signature:(pair<int,int>& elem)
perrmsg	errmsg.cpp	/^void perrmsg(const char* info)$/;"	f	signature:(const char* info)
perrmsg	errmsg.h	/^void perrmsg(const char* info);$/;"	p	signature:(const char* info)
releaseFrames	functions.h	/^void releaseFrames(IplImage*** frames , int& size) ;$/;"	p	signature:(IplImage*** frames , int& size)
releaseFrames	tools.cpp	/^void releaseFrames(IplImage*** frames , int& size)$/;"	f	signature:(IplImage*** frames , int& size)
releaseImageArray	getHomographies.cpp	/^static void releaseImageArray(IplImage** array , int size)$/;"	f	file:	signature:(IplImage** array , int size)
releaseMats	functions.h	/^void releaseMats(CvMat*** , int);$/;"	p	signature:(CvMat*** , int)
releaseMats	tools.cpp	/^void releaseMats(CvMat*** mats , int size )$/;"	f	signature:(CvMat*** mats , int size )
sigma	calLuckiness.cpp	/^static const int sigma = 20 ;$/;"	v	file:
square	calLuckiness.cpp	24;"	d	file:
